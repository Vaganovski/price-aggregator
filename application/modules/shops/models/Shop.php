<?php

/**
 * Shops_Model_Shop
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class Shops_Model_Shop extends Shops_Model_Base_Shop implements Zend_Acl_Resource_Interface
{
    /**
     * Путь к изображению относительно public
     */
    const PUBLIC_UPLOAD_PATH = '/upload/prices';

    const TYPE_NORMAL = 'normal';
    const TYPE_INTERNET = 'internet';

    const PRICE_STATUS_ABSENT = 'absent';
    const PRICE_STATUS_QUEUE = 'queue';
    const PRICE_STATUS_PROCESSED = 'processed';
    
    const SHOP_STATUS_NEW = 'new';
    const SHOP_STATUS_AVALIBLE = 'available';
    const SHOP_STATUS_DISABLE = 'disable';

    public function getDiffUntillDateNowDate()
    {
      $nowDate = new Zend_Date();
      $untillDate = new Zend_Date($this->untill_date);
      return ceil(($untillDate->getTimestamp() - $nowDate->getTimestamp())/86400);
    }

    public function getDiffLastRenewalUntillDate()
    {
      $lastRenewalDate = new Zend_Date($this->last_renewal_date);
      $untillDate = new Zend_Date($this->untill_date);
      return ceil(($untillDate->getTimestamp() - $lastRenewalDate->getTimestamp())/86400);
    }

    public function getPriceUpdatedAt()
    {
        if($this->_get('price_updated_at')) {
            $date = new Zend_Date($this->_get('price_updated_at'));
            return $date->toString("dd.MM.YYYY H:m");
        } else {
            return null;
        }
    }

    /**
     * Урл с http://
     * @return string
     */
    public function getSiteUrl()
    {
        if (strpos($this->_get('site'), 'http://') === false) {
            return 'http://' . $this->_get('site');
        }
        return $this->_get('site');
    }

    /**
     * Урл без http://
     * @return string
     */
    public function getSite()
    {
        return str_replace('http://', '', $this->_get('site'));
    }

        /**
     * Presave hook
     *
     * @param Doctrine_Event $event
     */
    public function preSave($event = NULL) {
        if (!isset ($this->untill_date)) {
            $this->untill_date = Zend_Date::now()->toString('y-MM-dd WW');;
        }
        if (!isset ($this->last_renewal_date)) {
            $this->last_renewal_date = Zend_Date::now()->toString('y-MM-dd WW');;
        }
        
        if (is_null($this->chain_shop_id)) {
            $this->chain_name = $this->name;
        } else {
            $this->chain_name = $this->ChainShop->name;
        }
        
        $modifiedFields = $this->getModified();
        // Проверка на смену статуса
        if (array_key_exists('status', $modifiedFields)) {
            // Сбрасываем кеш количества товаров в категориях
            $cache = Zend_Controller_Front::getInstance()->getParam('bootstrap')->getResource('Cache');
            $cacheCounters = $cache->counters;
            $cacheCounters->remove('catalog_view_helper_productscount');
        }

        parent::preSave($event);
    }

    /**
     * Return user resource id
     *
     * @return string
     */
    public function getResourceId()
    {
        $manager = (@Zend_Auth::getInstance()->getIdentity()->role == Users_Model_User::ROLE_MANAGER &&
                $this->manager_id == @Zend_Auth::getInstance()->getIdentity()->id) ?  true : false ;

        if ($this->user_id == @Zend_Auth::getInstance()->getIdentity()->id || $manager)
        {
            return 'object:shops:shop:my';
        } else {
            return 'object:shops:shop:foreign';
        }
    }

    public function getPriceFilenameUrl()
    {
        if (strlen($this->price_filename)) {
            return self::PUBLIC_UPLOAD_PATH
                . '/'
                . $this->price_filename;
        }
        return NULL;
    }
}