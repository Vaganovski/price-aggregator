<?php

/**
 * Catalog_Model_ProductImage
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class Catalog_Model_ProductImage extends Catalog_Model_Base_ProductImage
{
    /**
     * Путь к изображению относительно public
     */
    const PUBLIC_UPLOAD_PATH = '/upload/images/products';

    /**
     * Путь к изображению относительно public
     */
    const SUFFIX_PREVIEW_IMAGE = '-preview';

    /**
     * Путь к изображению относительно public
     */
    const SUFFIX_THUMBNAIL_IMAGE = '-thumb';

     /**
     * Устанавливает имя для каринки
     * Также удаляет файл предыдущей картинки, если такой был
     *
     * @param string $imageFilename
     */
    public function setImageFilename($imageFilename)
    {
        if (strlen($imageFilename) && $this->_get('image_filename') != $imageFilename) {
            $this->unlinkImages();
            $this->_set('image_filename', $imageFilename);
            $this->postprocessing();
        }
    }

    /**
     * Uploaded image postprocessing
     *
     * @return Brand
     */
    public function postprocessing()
    {
        // Load image
        $image = ZFEngine_Image::factory($this->getImageFullPath());

        // Create thumbnail and preview image
        $this->createImagePreview($image)
             ->createImageThumbnail($image);

        return $this;
    }



    /**
     * Create image thumbnail and save it to file
     *
     * @param ZFEngine_Image_Adapter_Abstract $image
     * @return Product
     */
    public function createImageThumbnail(ZFEngine_Image_Adapter_Abstract $image)
    {
        $imageThumbFileName = $this->getImageAbsoluteUploadPath()
                              . DIRECTORY_SEPARATOR
                              . ZFEngine_File::addSuffixToFileName($this->image_filename, self::SUFFIX_THUMBNAIL_IMAGE);

        $config['width'] = 47;
        $config['height'] = 47;
        $image->resize($config['width'], $config['height'], true)
              ->saveAs($imageThumbFileName, 95);

        return $this;
    }

    /**
     * Create image preview and save it to file
     *
     * @param ZFEngine_Image_Adapter_Abstract $image
     * @return Product
     */
    public function createImagePreview(ZFEngine_Image_Adapter_Abstract $image)
    {
        $imageThumbFileName = $this->getImageAbsoluteUploadPath()
                              . DIRECTORY_SEPARATOR
                              . ZFEngine_File::addSuffixToFileName($this->image_filename, self::SUFFIX_PREVIEW_IMAGE);
        $config['width'] = 90;
        $config['height'] = 90;
        $image->resize($config['width'], $config['height'], true)
              ->saveAs($imageThumbFileName, 95);

        return $this;
    }

    /**
     * Return absolute path to the image file
     * @param string $type 'original', 'preview' or 'thumbnail'
     *
     * @return string|NULL
     */
    public function getImageFullPath($type = 'original')
    {
        if (strlen($this->image_filename)) {
            switch ($type) {
                default:
                case 'original':
                    return self::getImageAbsoluteUploadPath() . DIRECTORY_SEPARATOR . $this->image_filename;
                case 'preview':
                    return self::getImageAbsoluteUploadPath() . DIRECTORY_SEPARATOR
                        . ZFEngine_File::addSuffixToFileName($this->image_filename, self::SUFFIX_PREVIEW_IMAGE);
                case 'thumbnail':
                    return self::getImageAbsoluteUploadPath() . DIRECTORY_SEPARATOR
                        . ZFEngine_File::addSuffixToFileName($this->image_filename, self::SUFFIX_THUMBNAIL_IMAGE);
            }
        }
        return NULL;
    }



    /**
     * Возвращает абсолютный путь к папке с оригинальными изображениями
     *
     * @return string
     */
    public static function getImageAbsoluteUploadPath()
    {
        return realpath(APPLICATION_PATH . '/../public' . self::PUBLIC_UPLOAD_PATH);
    }

    /**
     * Return url path to the image file
     *
     * @return string
     */
    public function getImageUrl()
    {
        if (strlen($this->image_filename)) {
            return self::PUBLIC_UPLOAD_PATH
                . '/'
                . $this->image_filename;
        }
        return NULL;
    }

    /**
     * Return url path to the image file
     *
     * @return string
     */
    public function getImagePreviewUrl()
    {
        if (strlen($this->image_filename)) {
            return self::PUBLIC_UPLOAD_PATH
                . '/'
                . ZFEngine_File::addSuffixToFileName($this->image_filename, self::SUFFIX_PREVIEW_IMAGE);
        }
        return NULL;
    }

    /**
     * Return url path to the image file
     *
     * @return string
     */
    public function getImageThumbnailUrl()
    {
        if (strlen($this->image_filename)) {
            return self::PUBLIC_UPLOAD_PATH
                . '/'
                . ZFEngine_File::addSuffixToFileName($this->image_filename, self::SUFFIX_THUMBNAIL_IMAGE);
        }
        return NULL;
    }

    /**
     * Delete images
     *
     * @return void
     */
    public function unlinkImages()
    {
        if (!strlen($this->image_filename)) {
            return null;
        }

        if (file_exists($this->getImageFullPath())) {
            unlink($this->getImageFullPath());
        }
        if (file_exists($this->getImageFullPath('preview'))) {
            unlink($this->getImageFullPath('preview'));
        }
        if (file_exists($this->getImageFullPath('thumbnail'))) {
            unlink($this->getImageFullPath('thumbnail'));
        }
    }

    /**
     * returns the record representation as an array
     *
     * @link http://www.doctrine-project.org/documentation/manual/1_1/en/working-with-models
     * @param boolean $deep         whether to include relations
     * @param boolean $prefixKey    not used
     * @return array
     */
    public function toArray($deep = true, $prefixKey = false)
    {
        $result = parent::toArray($deep, $prefixKey);
        $result['image_url'] = $this->getImageUrl();
        $result['image_preview_url'] = $this->getImagePreviewUrl();
        $result['image_thumbnail_url'] = $this->getImageThumbnailUrl();
		//$imagesize = getimagesize($this->getImageFullPath('thumbnail'));
		$result['image_thumbnail_dim'] = '20';
        return $result;
    }
}