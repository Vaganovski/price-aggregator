<?php

/**
 * Users_Model_UserBase
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class Users_Model_UserBase extends Users_Model_Base_UserBase implements Zend_Acl_Resource_Interface
{

      /**
     * Administrator role name
     */
    const ROLE_ADMINISTRATOR    = 'administrator';

    /**
     * Moderator role name
     */
    const ROLE_MODERATOR    = 'moderator';

    /**
     * Member role name
     */
    const ROLE_MEMBER       = 'member';

     /**
     * Merchant role name
     */
    const ROLE_MERCHANT       = 'merchant';

    /**
     * Guest role name
     */
    const ROLE_GUEST        = 'guest';

    /**
     * Minimum username length
     */
    const MIN_USERNAME_LENGTH = 3;

    /**
     * Maximum username length
     */
    const MAX_USERNAME_LENGTH = 16;

    /**
     * Minimum password length
     */
    const MIN_PASSWORD_LENGTH = 4;


    /**
     * Return user resource id
     *
     * @return string
     */
    public function getResourceId()
    {
        if ($this->id == @Zend_Auth::getInstance()->getIdentity()->id) {
            return 'object:users:user:my';
        } else {
            return 'object:users:user:foreign';
        }
    }

    /**
     * Set password
     *
     * @param string $password
     * @return void
     */
    public function setPassword($password)
    {
        if (strlen($password)) {
            $passwordSalt = self::generateSalt();
            $passwordHash = md5(md5($password) . $passwordSalt);
            $this->_set('password_hash', $passwordHash);
            $this->_set('password_salt', $passwordSalt);
        }
    }


    /**
     * Set code for reset password
     *
     * @param string $passwordResetCode
     */
    public function setPasswordResetCode($passwordResetCode)
    {
        $this->_set('password_reset_code', $passwordResetCode);
        if (strlen($passwordResetCode)) {
            $this->_set('password_reset_code_created_at', new Doctrine_Expression('NOW()'));
        }
    }

    /**
     * Generate restore code
     *
     * @return string
     */
    public static function generateRestoreCode()
    {
        return substr(md5(mktime() + rand(0, 100)), -8);
    }

    /**
     * Generate salt
     *
     * @return string
     */
    public static function generateSalt()
    {
        $salt = '';
        $length = rand(5, 8); // salt length
        for($i=0; $i<$length; $i++) {
             $salt .= chr(rand(33, 126)); // symbol from ASCII-table
        }

        return $salt;
    }


    /**
     * Change password
     *
     * @param string $newPassword
     * @param string $oldPassword
     */
    public function changePassword($newPassword, $oldPassword)
    {
        if (!empty ($oldPassword)) {
            if (empty ($newPassword)) {
                throw new Exception(Zend_Layout::getMvcInstance()->getView()->translate('Не введен новый пароль.'));
            }
            if (md5(md5($oldPassword) . $this->password_salt) == $this->password_hash) {
                $this->setPassword($newPassword);
            } else {
                 throw new Exception(Zend_Layout::getMvcInstance()->getView()->translate('Старый пароль введен неверно.'));
            }
        }
    }


    /**
     * Авторизация пользователя
     *
     * @param string $username
     * @param string $password
     * @param string $mode
     */
    public static function authenticate($username, $password, $mode = '')
    {
        if ('hash' != $mode) {
            $sql = 'MD5(CONCAT(MD5(?), password_salt))';
        } else {
            $sql = 'MD5(CONCAT(?, password_salt))';
        }
        $authAdapter = new ZendX_Doctrine_Auth_Adapter(Doctrine::getConnectionByTableName('Users_Model_User'));
        $authAdapter->setTableName('Users_Model_User u')
                            ->setIdentityColumn('u.login')
                            ->setCredentialColumn('u.password_hash')
                            ->setCredentialTreatment($sql)
                            // email & login
                            ->setIdentity($username)
                            ->setCredential($password);
        $auth = Zend_Auth::getInstance();
        $result = $auth->authenticate($authAdapter);

        if ($result->isValid()) {
            $data = $authAdapter->getResultRowObject(null, array('password_hash', 'password_salt'));
            $auth->getStorage()->write($data);

            // @todo to config
            // remember user for 2 weeks
            Zend_Session::rememberMe(60*60*24*14);
            return true;
        } else {
            return false;
        }
    }

}